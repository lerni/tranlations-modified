@use "sass:math";
@import "~breakpoint-sass/stylesheets/breakpoint";
@import "includes/variables";
@import "includes/defaults";
@import "includes/mixins";
@import "includes/typography";

// Many styles
@import "components/*";

/* Layout
---------------------------------------------------------------------------------- */

html,
body {
	width: 100%;
	margin: 0;
	@include print {
		height: 99%;
		page-break-after: auto;
	}
}

html {
	letter-spacing: 0.02em;
	font-size: #{$font-size};
	font-family: #{$font-family};
	line-height: $lh;
	color: $text-color;
	@include normal;
	@include smoothFonts;
	overflow-y: scroll;
	overflow-x: hidden;
	@media (prefers-reduced-motion: no-preference) {
		scroll-behavior: smooth;
	}
}

body {
	min-height: 100vh;
	display: flex;
	flex-direction: column;
}

.bold,
strong {
	@include bold;
}

// #BetterNavigator {
// 	display:none !important;
// }

#header {
	display: flex;
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	z-index: 9000;
	width: 100%;
	will-change: transform;
	transition-duration: 0.2s;
	transition-property: transform;
	transition-timing-function: ease-out;
	transform: translateY(0%);
	box-shadow: none;
	background-color: $white;
	height: $headerheight;
	@include breakpoint($Lneg) {
		height: $headerheight--small;
	}
	@include breakpoint($Sneg) {
		height: $headerheight--smaller;
	}
	.inner {
		display: grid;
		grid-template-rows: #{$lh * 1.2}em 1fr;
		grid-template-columns: auto 1fr;
		// max-width: calc(#{$inner-width + 200px});
		@include breakpoint($Lneg) {
			// min-height: 100vh;
			grid-template-rows:
				#{$lh * 1.2}em
				calc(#{$headerheight--smaller} - #{$lh * 1.2}em)
				1fr;
		}
		a.logo {
			display: flex;
			flex-direction: column;
			justify-content: center;
			width: 280px;
			height: 100%;
			grid-row: 1 / 3;
			grid-column: 1 / 2;
			@include breakpoint($Lneg) {
				width: 180px;
			}
			svg,
			img {
				width: 100%;
				height: auto;
			}
		}
		&.nav {
			// this things are living in _menu.scss
		}
	}
	&.headroom {
		&.headroom--top {
			// shuldn't do anything here to prevent fouc
		}
		&.headroom--not-top {
			box-shadow: 0 0 0.7em rgba($black, 0.3);
		}
		&.headroom--pinned {
			transform: translateY(0%);
		}
		&.headroom--unpinned {
			transform: translateY(-100%);
			box-shadow: none;
		}
	}
}

body > main {
	width: 100%;
	flex: 1 1 auto;
	border-top: $headerheight solid transparent;
	@include breakpoint($Lneg) {
		border-top-width: $headerheight--small;
	}
	@include breakpoint($Sneg) {
		border-top-width: $headerheight--smaller;
	}
}

.inner {
	width: 100%;
	max-width: $inner-width;
	margin: 0 auto;
	@include horizontal-spacing;
}

.vertical-spacing {
	> *:last-child {
		margin-bottom: 0;
	}
	@include vertical-spacing;
}

.horizontal-spacing {
	@include horizontal-spacing;
}

nav.breadcrumbs {
	padding: #{$lh}em 0 #{$lh * 2}em 0;
	text-align: left;
	// .typography {
	// 	max-width: $inner-width;
	// 	margin-left: auto;
	// 	margin-right: auto;
	// }
	a,
	span,
	.delimiter {
		font-size: $font-size--small;
		color: $text-color;
	}
	a {
		@include bold;
	}
	.delimiter {
		display: inline-block;
		width: 1em;
		height: 1em;
		margin: 0 0.2em;
		background-repeat: no-repeat;
		background-image: svg-load("../images/svg/delimiter.svg");
		background-position: bottom center;
		background-size: 0.3em;
	}
}

p.cat-tag {
	display: flex;
	gap: #{math.div($lh, 1)}em;
	flex-wrap: wrap;
	justify-content: flex-start;
	margin: 0;
	padding: #{$lh}em 0 #{$lh * 2}em 0;
	> span,
	> a {
		display: inline-block;
		padding: calc(#{math.div($lh, 4)}em - 2px)
			calc(#{math.div($lh, 2)}em - 2px); // same spacing as @buttonstyle
		border-width: 2px;
		border-style: solid;
		border-color: $text-color;
		color: $text-color;
		@include bold;
		&:last-child {
			margin-right: 0;
		}
		&.current {
			color: $white;
			background-color: $text-color;
		}
		&:not(.current) {
			background-color: transparent;
		}
	}
	> a.all:not(.current) {
		border-color: transparent;
		padding-left: 0;
		padding-right: 0;
		&::before {
			display: inline-block;
			content: "";
			width: #{$lh * 0.6}em;
			height: 1em;
			background-size: auto 0.6em;
			background-repeat: no-repeat;
			background-position: right 0 center;
			background-image: svg-load(
				"../images/svg/arrow-outline.svg",
				fill=#{$text-color}
			);
			transform: rotate(180deg);
			margin-right: #{math.div($lh, 4)}em;
			vertical-align: -0.1em;
		}
	}
}

.element {
	&:not(.full-width) {
		max-width: $inner-width;
	}
	width: 100%;
	margin-left: auto;
	margin-right: auto;
	position: relative;
	scroll-margin-top: $headerheight;
	$betternav--red: #d73f1d;
	$betternav--green: #068913;
	outline: none;
	>a.preview-edit {
		position: absolute;
		z-index: 8000;
		top: #{math.div($lh, 2)}em;
		right: #{math.div($lh, 2)}em;
		width: #{$lh}em;
		height: #{$lh}em;
		justify-content: center;
		align-items: center;
		border-radius: #{$lh}em;
		background-color: rgba($betternav--green, .7);
		color: $white;
		display: none;
		&.draft {
			background-color: rgba($betternav--red, .7);
		}
		&.modified {
			border: 2px solid $betternav--red;
		}
		span {
			margin: auto;
			transform: scaleX(-1);
		}
		@include breakpoint($XLplus) {
			display: flex;
		}
	}
	&.elementhero >a.preview-edit{
		top: auto;
		bottom: #{math.div($lh, 2)}em;
	}
	&:has(a.preview-edit:hover) {
		&::after {
			z-index: 50;
			background-color: rgba($betternav--green, 0.1);
			mix-blend-mode: multiply;
			pointer-events: none;
		}
	}
	&:has(a.preview-edit.draft:hover) {
		&::after {
			background-color: rgba($betternav--red, 0.1);
		}
	}
	&::after {
		content: "";
		position: absolute;
		z-index: -1;
		top: 0;
		right: -50vw;
		bottom: 0;
		left: -50vw;
		// prevents horizontal overflow on ios
		@include breakpoint($XLneg) {
			left: 0;
			right: 0;
		}
	}
	&.background--transparent {
		&::after {
			background-color: transparent;
		}
	}
	&.background--white {
		&::after {
			background-color: $white;
		}
	}
	&.background--gray--lighter {
		&::after {
			background-color: $gray--lighter;
		}
	}
	.element-title {
		flex: 0 0 100%;
	}

	// when full-width .element-title shold not hava padding on .inner
	&.full-width {
		&.elementmaps,
		&.elementgallery {
			@include breakpoint($XLneg) {
				> .inner {
					padding-left: 0;
					padding-right: 0;
				}
			}
		}
	}
	.typography.width-reduced {
		max-width: $inner-width--reduced;
		margin-left: 0;
		margin-right: auto;
	}
	&.elementcontent[class*='push-up-'] {
		padding-top: #{math.div($lh, 3) * 2}em;
		@include breakpoint($XLplus) {
			position: relative;
			z-index: 100;
			&::after {
				background-color: transparent;
			}
			&.background--transparent {
				background-color: transparent;
			}
			&.background--white {
				background-color: $white;
			}
			&.background--gray--lighter {
				background-color: $gray--lighter;
			}
			.large {
				font-size: clamp(1.2em, 5vw, 2em);
			}
		}
	}
	&.elementcontent {
		.typography {
			> *:last-child {
				margin-bottom: 0;
			}
		}
	}
	&.elementform {
		#uff {
			scroll-margin-top: calc(#{$headerheight} + #{$lh}em);
		}
	}
	$min-spacing: 0;
	$max-spacing: 6;
	@for $i from $max-spacing through $min-spacing {
		.element:not(.global-alert) + &.push-up-#{$i} {
			@include breakpoint($XLplus) {
				margin-top: #{(($lh * $i) + .2) * -1}em; // odd addition of .2 to better match line-height ;-/
			}
		}
		$i1: $i + 1;
	}
	@for $i from $max-spacing through $min-spacing {
		&.spacing-bottom-#{$i} {
			padding-bottom: #{$lh * $i}em;
		}
		$i1: $i + 1;
	}
	@for $i from $max-spacing through $min-spacing {
		&.spacing-top-#{$i} {
			padding-top: #{$lh * $i}em;
		}
		$i1: $i + 1;
	}
}

@media print {
	footer {
		display: none;
	}
	.inner {
		max-width: 100%;
	}
}
@page {
	size: 297mm 210mm;
	margin: 15mm;
}

// todo - unify/cleanup styles
// this is use in ElementPage_job
// classes are same as in backend
// how does userform handle such things?
.alert {
	border: 1px solid;
	padding: #{math.div($lh, 2)}em;
	border-radius: #{math.div($lh, 4)}em;
	margin-bottom: #{math.div($lh, 2)}em;
	&.alert-warning {
		background-color: rgba($red, 0.1);
		border-color: rgba($red, 1);
	}
}

.link.forth {
	display: inline-block;
	color: #{$link-color};
	@include arrow-after($link-color);
}

.parent-link.back {
	display: inline-block;
	color: #{$link-color};
	@include arrow-before($link-color);
}

.global-alert:not(.elementhero) {
	background-color: $blue;
	padding: #{math.div($lh, 2)}em 0;
	margin-bottom: #{$lh}em;
	.inner > * {
		color: $white;
		&:last-child {
			margin-bottom: 0;
		}
	}
}

.social-icons {
	margin: auto 0 0;
	display: flex;
	gap: #{$lh}em;
	a {
		transition: transform 0.05s linear;
		// coloring svg with https://codepen.io/sosuke/pen/Pjoqqp
		img {
			width: 1em;
			height: auto;
			filter: invert(100%) sepia(0%) saturate(7500%) hue-rotate(252deg)
				brightness(101%) contrast(102%);
		}
		&:hover {
			img {
				filter: invert(36%) sepia(58%) saturate(6458%)
					hue-rotate(327deg) brightness(96%) contrast(85%);
				transform: scale(1.08);
			}
		}
	}
}
